#include<bits/stdc++.h>
using namespace std;
class node{
public:
    char data;
    bool islast;
    unordered_map<char,node*> children;
    node(char data){
        this -> data = data;
        this -> islast = false;
    }
};
class Trie {
public:
    node *root;
    int count;
    Trie(){
        this -> root = new node('\0');
        this -> count = 0;
    }
    void addedge(string str){
        node* temp = root;
        for(int i = 0;i < str.length();i++){
            char ch = str[i];
            if(temp->children.count(ch)){
                temp = temp -> children[ch];
            }
            else {
                node* n = new node(ch);
                temp -> children[ch] = n;
                temp = n;
            }
        }
        temp -> islast = true;
    }
    bool searchit(string str){
        node* temp = root;
        for(int i = 0; i < str.size();i++){
            char ch = str[i];
            if(temp -> children.count(ch)){ //mp.count(var) gives us true or false if a charachter is present or not
                temp = temp -> children[ch];
            }
            else return false;
        }
        if(temp -> islast) return true;
        return false;
    }
};
int main(void){
    Trie T;
    int n;
    cin >> n;
    while(n--){
        string str;
        cin>>str;
        T.addedge(str);
    }
    int q;
    cin>>q;
    while(q--){
        string str;
        cin>>str;
        if(T.searchit(str)) cout<<"Present"<<endl;
        else cout<<"Not present"<<endl;
    }
}
